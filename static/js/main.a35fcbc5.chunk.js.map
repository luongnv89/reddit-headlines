{"version":3,"sources":["actions/index.js","reducers/index.js","configureStore.js","components/Picker.js","components/Posts.js","containers/AsyncApp.js","containers/Root.js","index.js"],"names":["REQUEST_POSTS","RECEIVE_POSTS","SELECT_SUBREDDIT","INVALIDATE_SUBREDDIT","fetchPosts","subreddit","dispatch","type","requestPosts","fetch","concat","then","response","json","posts","data","children","map","child","receivedAt","Date","now","receivePosts","fetchPostsIfNeeded","getState","state","postsBySubreddit","isFetching","didInvalidate","shouldFetchPosts","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","defineProperty","items","lastUpdated","selectedSubreddit","loggerMiddleware","createLogger","Picker","_this$props","this","props","value","onChange","options","react_default","a","createElement","e","target","option","key","Component","Posts","post","i","title","AsyncApp","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","handleRefreshClick","prevProps","_this$props2","nextSubreddit","preventDefault","_this$props3","_this$props4","Picker_Picker","toLocaleTimeString","onClick","style","opacity","Posts_Posts","connect","preloadedState","_ref","store","createStore","applyMiddleware","thunkMiddleware","Root","es","containers_AsyncApp","render","Root_Root","document","getElementById"],"mappings":"+QAEaA,EAAgB,gBAChBC,EAAgB,gBAChBC,EAAmB,mBACnBC,EAAuB,uBAgC9BC,EAAa,SAAAC,GACjB,OAAO,SAAAC,GAEL,OADAA,EAlBwB,SAAAD,GAC1B,MAAO,CACLE,KAAMP,EACNK,aAeSG,CAAaH,IACfI,IAAK,4BAAAC,OAA6BL,EAA7B,UACTM,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIP,EAdQ,SAACD,EAAWQ,GACtC,MAAO,CACLN,KAAMN,EACNI,YACAS,MAAOD,EAAKE,KAAKC,SAASC,IAAI,SAAAC,GAAK,OAAIA,EAAMH,OAC7CI,WAAYC,KAAKC,OASQC,CAAajB,EAAWQ,QAexCU,EAAqB,SAAAlB,GAChC,OAAO,SAACC,EAAUkB,GAChB,GAbqB,SAACC,EAAOpB,GAC/B,IAAMS,EAAQW,EAAMC,iBAAiBrB,GACrC,OAAKS,IAEMA,EAAMa,YAGRb,EAAMc,cAMTC,CAAiBL,IAAYnB,GAC/B,OAAOC,EAASF,EAAWC,MCAjC,IAKeyB,EALKC,YAAgB,CAClCL,iBAdF,WAA8C,IAApBD,EAAoBO,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAZ,GAAIG,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC5C,OAAQC,EAAO5B,MACb,KAAKJ,EACL,KAAKF,EACL,KAAKD,EACH,OAAOoC,OAAOC,OAAO,GAAIZ,EAAlBW,OAAAE,EAAA,EAAAF,CAAA,GACJD,EAAO9B,UApChB,WAOE,IANAoB,EAMAO,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GANQ,CACNL,YAAY,EACZC,eAAe,EACfW,MAAO,IAETJ,EACAH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACA,OAAQC,EAAO5B,MACb,KAAKJ,EACH,OAAOiC,OAAOC,OAAO,GAAIZ,EAAO,CAC9BG,eAAe,IAEnB,KAAK5B,EACH,OAAOoC,OAAOC,OAAO,GAAIZ,EAAO,CAC9BE,YAAY,EACZC,eAAe,IAEnB,KAAK3B,EACH,OAAOmC,OAAOC,OAAO,GAAIZ,EAAO,CAC9BE,YAAY,EACZC,eAAe,EACfW,MAAOJ,EAAOrB,MACd0B,YAAaL,EAAOhB,aAExB,QACE,OAAOM,GAUeX,CAAMW,EAAMU,EAAO9B,WAAY8B,KAEvD,QACE,OAAOV,IAMXgB,kBAtDF,WAAsD,IAA3BhB,EAA2BO,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAnB,UAAWG,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACpD,OAAQC,EAAO5B,MACb,KAAKL,EACH,OAAOiC,EAAO9B,UAChB,QACE,OAAOoB,MCRPiB,EAAmBC,qCCFJC,mLACV,IAAAC,EAC8BC,KAAKC,MAAlCC,EADDH,EACCG,MAAOC,EADRJ,EACQI,SAAUC,EADlBL,EACkBK,QAEzB,OACEC,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,UAAQJ,SAAU,SAAAK,GAAC,OAAIL,EAASK,EAAEC,OAAOP,QAAQA,MAAOA,GACrDE,EAAQjC,IAAI,SAAAuC,GAAM,OACjBL,EAAAC,EAAAC,cAAA,UAAQL,MAAOQ,EAAQC,IAAKD,GACzBA,cAVqBE,aCAfC,mLAEjB,OACER,EAAAC,EAAAC,cAAA,UACGP,KAAKC,MAAMjC,MAAMG,IAAI,SAAC2C,EAAMC,GAAP,OACpBV,EAAAC,EAAAC,cAAA,MAAII,IAAKI,GAAID,EAAKE,iBALOJ,aCQ7BK,cACJ,SAAAA,EAAYhB,GAAO,IAAAiB,EAAA,OAAA5B,OAAA6B,EAAA,EAAA7B,CAAAU,KAAAiB,IACjBC,EAAA5B,OAAA8B,EAAA,EAAA9B,CAAAU,KAAAV,OAAA+B,EAAA,EAAA/B,CAAA2B,GAAAK,KAAAtB,KAAMC,KACDsB,aAAeL,EAAKK,aAAaC,KAAlBlC,OAAAmC,EAAA,EAAAnC,CAAA4B,IACpBA,EAAKQ,mBAAqBR,EAAKQ,mBAAmBF,KAAxBlC,OAAAmC,EAAA,EAAAnC,CAAA4B,IAHTA,mFAMC,IAAAnB,EACsBC,KAAKC,MAArCzC,EADUuC,EACVvC,SAAUmC,EADAI,EACAJ,kBAClBnC,EAASiB,EAAmBkB,+CAGXgC,GACjB,GAAI3B,KAAKC,MAAMN,oBAAsBgC,EAAUhC,kBAAmB,KAAAiC,EACxB5B,KAAKC,MAArCzC,EADwDoE,EACxDpE,SAAUmC,EAD8CiC,EAC9CjC,kBAClBnC,EAASiB,EAAmBkB,0CAInBkC,GACX7B,KAAKC,MAAMzC,SLvBN,CACLC,KAAML,EACNG,UKqBoCsE,IACpC7B,KAAKC,MAAMzC,SAASiB,EAAmBoD,+CAGtBrB,GACjBA,EAAEsB,iBADkB,IAAAC,EAGoB/B,KAAKC,MAArCzC,EAHYuE,EAGZvE,SAAUmC,EAHEoC,EAGFpC,kBAClBnC,ELxBK,CACLC,KAAMJ,EACNE,UKsB6BoC,IAC7BnC,EAASiB,EAAmBkB,qCAGrB,IAAAqC,EACuDhC,KAAKC,MAA3DN,EADDqC,EACCrC,kBAAmB3B,EADpBgE,EACoBhE,MAAOa,EAD3BmD,EAC2BnD,WAAYa,EADvCsC,EACuCtC,YAC9C,OACEW,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0B,EAAD,CACE/B,MAAOP,EACPQ,SAAUH,KAAKuB,aACfnB,QAAS,CAAC,UAAW,cAEvBC,EAAAC,EAAAC,cAAA,SACGb,GACCW,EAAAC,EAAAC,cAAA,+BACmB,IAAIjC,KAAKoB,GAAawC,qBADzC,IACgE,MAGhErD,GACAwB,EAAAC,EAAAC,cAAA,UAAQ4B,QAASnC,KAAK0B,oBAAtB,YAGH7C,GAA+B,IAAjBb,EAAMmB,QAAgBkB,EAAAC,EAAAC,cAAA,yBACnC1B,GAA+B,IAAjBb,EAAMmB,QAAgBkB,EAAAC,EAAAC,cAAA,oBACrCvC,EAAMmB,OAAS,GACdkB,EAAAC,EAAAC,cAAA,OAAK6B,MAAO,CAAEC,QAASxD,EAAa,GAAM,IACxCwB,EAAAC,EAAAC,cAAC+B,EAAD,CAAOtE,MAAOA,aAvDH4C,aAwFR2B,IH5FwBC,EG4FxBD,cAjBf,SAAyB5D,GAAO,IACtBgB,EAAwChB,EAAxCgB,kBADsB8C,EACkB9D,EAArBC,iBAEzBe,IACG,CACHd,YAAY,EACZY,MAAO,IAJDZ,EAFsB4D,EAEtB5D,WAAYa,EAFU+C,EAEV/C,YAOpB,MAAO,CACLC,oBACA3B,MAX4ByE,EAEGhD,MAU/BZ,aACAa,gBAIW6C,CAAyBtB,GC9FlCyB,EJGGC,YACL3D,EACAwD,EACAI,YAAgBC,IAAiBjD,IIJhBkD,mLAEjB,OACEzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAUL,MAAOA,GACfrC,EAAAC,EAAAC,cAACyC,EAAD,cAJ0BpC,aCDlCqC,iBAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAAUC,SAASC,eAAe","file":"static/js/main.a35fcbc5.chunk.js","sourcesContent":["import fetch from \"cross-fetch\";\n\nexport const REQUEST_POSTS = \"REQUEST_POSTS\";\nexport const RECEIVE_POSTS = \"RECEIVE_POSTS\";\nexport const SELECT_SUBREDDIT = \"SELECT_SUBREDDIT\";\nexport const INVALIDATE_SUBREDDIT = \"INVALIDATE_SUBREDDIT\";\n\nexport const selectSubreddit = subreddit => {\n  return {\n    type: SELECT_SUBREDDIT,\n    subreddit\n  };\n};\n\nexport const invalidateSubreddit = subreddit => {\n  return {\n    type: INVALIDATE_SUBREDDIT,\n    subreddit\n  };\n};\n\nexport const requestPosts = subreddit => {\n  return {\n    type: REQUEST_POSTS,\n    subreddit\n  };\n};\n\nexport const receivePosts = (subreddit, json) => {\n  return {\n    type: RECEIVE_POSTS,\n    subreddit,\n    posts: json.data.children.map(child => child.data),\n    receivedAt: Date.now()\n  };\n};\n\nconst fetchPosts = subreddit => {\n  return dispatch => {\n    dispatch(requestPosts(subreddit));\n    return fetch(`https://www.reddit.com/r/${subreddit}.json`)\n      .then(response => response.json())\n      .then(json => dispatch(receivePosts(subreddit, json)));\n  };\n};\n\nconst shouldFetchPosts = (state, subreddit) => {\n  const posts = state.postsBySubreddit[subreddit];\n  if (!posts) {\n    return true;\n  } else if (posts.isFetching) {\n    return false;\n  } else {\n    return posts.didInvalidate;\n  }\n};\n\nexport const fetchPostsIfNeeded = subreddit => {\n  return (dispatch, getState) => {\n    if (shouldFetchPosts(getState(), subreddit)) {\n      return dispatch(fetchPosts(subreddit));\n    }\n  };\n};\n","import { combineReducers } from 'redux'\nimport {\n  SELECT_SUBREDDIT,\n  INVALIDATE_SUBREDDIT,\n  REQUEST_POSTS,\n  RECEIVE_POSTS\n} from '../actions'\n\nfunction selectedSubreddit(state = 'reactjs', action) {\n  switch (action.type) {\n    case SELECT_SUBREDDIT:\n      return action.subreddit\n    default:\n      return state\n  }\n}\n\nfunction posts(\n  state = {\n    isFetching: false,\n    didInvalidate: false,\n    items: []\n  },\n  action\n) {\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n      return Object.assign({}, state, {\n        didInvalidate: true\n      })\n    case REQUEST_POSTS:\n      return Object.assign({}, state, {\n        isFetching: true,\n        didInvalidate: false\n      })\n    case RECEIVE_POSTS:\n      return Object.assign({}, state, {\n        isFetching: false,\n        didInvalidate: false,\n        items: action.posts,\n        lastUpdated: action.receivedAt\n      })\n    default:\n      return state\n  }\n}\n\nfunction postsBySubreddit(state = {}, action) {\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n    case RECEIVE_POSTS:\n    case REQUEST_POSTS:\n      return Object.assign({}, state, {\n        [action.subreddit]: posts(state[action.subreddit], action)\n      })\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n  postsBySubreddit,\n  selectedSubreddit\n})\n\nexport default rootReducer","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport rootReducer from './reducers';\n\nconst loggerMiddleware = createLogger()\n\nexport default function configureStore(preloadedState) {\n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunkMiddleware, loggerMiddleware)\n  )\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class Picker extends Component {\n  render() {\n    const { value, onChange, options } = this.props\n\n    return (\n      <span>\n        <h1>{value}</h1>\n        <select onChange={e => onChange(e.target.value)} value={value}>\n          {options.map(option => (\n            <option value={option} key={option}>\n              {option}\n            </option>\n          ))}\n        </select>\n      </span>\n    )\n  }\n}\n\nPicker.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class Posts extends Component {\n  render() {\n    return (\n      <ul>\n        {this.props.posts.map((post, i) => (\n          <li key={i}>{post.title}</li>\n        ))}\n      </ul>\n    )\n  }\n}\n\nPosts.propTypes = {\n  posts: PropTypes.array.isRequired\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {\n  selectSubreddit,\n  fetchPostsIfNeeded,\n  invalidateSubreddit\n} from '../actions'\nimport Picker from '../components/Picker'\nimport Posts from '../components/Posts'\n\nclass AsyncApp extends Component {\n  constructor(props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleRefreshClick = this.handleRefreshClick.bind(this)\n  }\n\n  componentDidMount() {\n    const { dispatch, selectedSubreddit } = this.props\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.selectedSubreddit !== prevProps.selectedSubreddit) {\n      const { dispatch, selectedSubreddit } = this.props\n      dispatch(fetchPostsIfNeeded(selectedSubreddit))\n    }\n  }\n\n  handleChange(nextSubreddit) {\n    this.props.dispatch(selectSubreddit(nextSubreddit))\n    this.props.dispatch(fetchPostsIfNeeded(nextSubreddit))\n  }\n\n  handleRefreshClick(e) {\n    e.preventDefault()\n\n    const { dispatch, selectedSubreddit } = this.props\n    dispatch(invalidateSubreddit(selectedSubreddit))\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\n  }\n\n  render() {\n    const { selectedSubreddit, posts, isFetching, lastUpdated } = this.props\n    return (\n      <div>\n        <Picker\n          value={selectedSubreddit}\n          onChange={this.handleChange}\n          options={['reactjs', 'frontend']}\n        />\n        <p>\n          {lastUpdated && (\n            <span>\n              Last updated at {new Date(lastUpdated).toLocaleTimeString()}.{' '}\n            </span>\n          )}\n          {!isFetching && (\n            <button onClick={this.handleRefreshClick}>Refresh</button>\n          )}\n        </p>\n        {isFetching && posts.length === 0 && <h2>Loading...</h2>}\n        {!isFetching && posts.length === 0 && <h2>Empty.</h2>}\n        {posts.length > 0 && (\n          <div style={{ opacity: isFetching ? 0.5 : 1 }}>\n            <Posts posts={posts} />\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nAsyncApp.propTypes = {\n  selectedSubreddit: PropTypes.string.isRequired,\n  posts: PropTypes.array.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  lastUpdated: PropTypes.number,\n  dispatch: PropTypes.func.isRequired\n}\n\nfunction mapStateToProps(state) {\n  const { selectedSubreddit, postsBySubreddit } = state\n  const { isFetching, lastUpdated, items: posts } = postsBySubreddit[\n    selectedSubreddit\n  ] || {\n    isFetching: true,\n    items: []\n  }\n\n  return {\n    selectedSubreddit,\n    posts,\n    isFetching,\n    lastUpdated\n  }\n}\n\nexport default connect(mapStateToProps)(AsyncApp)","import React, { Component } from 'react'\nimport { Provider } from 'react-redux'\nimport configureStore from '../configureStore'\nimport AsyncApp from './AsyncApp'\n\nconst store = configureStore()\n\nexport default class Root extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <AsyncApp />\n      </Provider>\n    )\n  }\n}","import 'babel-polyfill'\n\nimport React from 'react';\nimport { render } from 'react-dom';\nimport Root from './containers/Root';\n\nrender(<Root />, document.getElementById('root'))"],"sourceRoot":""}